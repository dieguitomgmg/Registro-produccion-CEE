# -*- coding: utf-8 -*-
"""FAR Panel registro datos_v9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1909V2BffkZqgKyYuMsizh-VGaPbjSJf9
"""

#!pip install streamlit pandas pytz
# 1. Importar librer√≠as necesarias
import streamlit as st
import pandas as pd
from datetime import datetime
import os
from zoneinfo import ZoneInfo

# Inicializar session state
if "etapa" not in st.session_state:
    st.session_state.etapa = "CEE"

# Datos del proyecto
cees = ["Afan√≠as", "Aprocor", "Artesa", "Envera", "Funcarma", "Juan XXIII", "Prodis", "Trefemo"]
lineas_por_cee = {
    "Afan√≠as": ["L√≠nea 1", "L√≠nea 2"],
    "Aprocor": ["L√≠nea 1", "L√≠nea 2"],
    "Artesa": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Envera": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3", "L√≠nea 4"],
    "Funcarma": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Juan XXIII": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Prodis": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Trefemo": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3", "L√≠nea 4"]
}
estaciones_por_linea = {
    "Afan√≠as-L√≠nea 1": 2, "Afan√≠as-L√≠nea 2": 2,
    "Aprocor-L√≠nea 1": 2, "Aprocor-L√≠nea 2": 6,
    "Artesa-L√≠nea 1": 3, "Artesa-L√≠nea 2": 2, "Artesa-L√≠nea 3": 2,
    "Envera-L√≠nea 1": 3, "Envera-L√≠nea 2": 3, "Envera-L√≠nea 3": 2, "Envera-L√≠nea 4": 3,
    "Funcarma-L√≠nea 1": 4, "Funcarma-L√≠nea 2": 3, "Funcarma-L√≠nea 3": 3,
    "Juan XXIII-L√≠nea 1": 3, "Juan XXIII-L√≠nea 2": 3, "Juan XXIII-L√≠nea 3": 3,
    "Prodis-L√≠nea 1": 2, "Prodis-L√≠nea 2": 2, "Prodis-L√≠nea 3": 3,
    "Trefemo-L√≠nea 1": 4, "Trefemo-L√≠nea 2": 3, "Trefemo-L√≠nea 3": 3, "Trefemo-L√≠nea 4": 4
}



st.set_page_config(page_title="Registro Producci√≥n CEE", layout="centered")
st.title("üì¶ Registro de Producci√≥n - Centro Especial de Empleo")


# Inicializar variables en session_state si no existen
if "etapa" not in st.session_state:
    st.session_state.etapa = "CEE"
if "cee" not in st.session_state:
    st.session_state.cee = None
if "linea" not in st.session_state:
    st.session_state.linea = None
if "estacion" not in st.session_state:
    st.session_state.estacion = None

claves_acceso = {
    "Afan√≠as": "clave1",
    "Aprocor": "clave2",
    "Artesa": "clave3",
    "Envera": "clave4",
    "Funcarma": "clave5",
    "Juan XXIII": "clave6",
    "Prodis": "clave7",
    "Trefemo": "clave8"
}

def eliminar_registro_por_indice(indice):
    df = st.session_state.df

    if df.empty:
        st.warning("‚ö†Ô∏è No hay registros para eliminar.")
        return

    if indice not in df.index:
        st.error("‚ùå √çndice inv√°lido. No se puede eliminar el registro.")
        return

    estado_actual = df.loc[indice, "Estado"]

    # Eliminar el registro
    df = df.drop(indice).reset_index(drop=True)
    st.session_state.df = df

    # Si se elimin√≥ el √∫ltimo registro y es un registro de cambio de estado
    if indice == len(df):  # porque reset_index() lo cambia
        if estado_actual in ["Parada producci√≥n", "Reanudaci√≥n producci√≥n"]:
            if not df.empty:
                ultimo_estado = df.iloc[-1]["Estado"]
                if ultimo_estado == "Reanudaci√≥n producci√≥n":
                    st.session_state.estado_linea = "En producci√≥n"
                    st.session_state.produccion_iniciada = True
                elif ultimo_estado == "Parada producci√≥n":
                    st.session_state.estado_linea = "Parada por incidencia"
                    st.session_state.produccion_iniciada = False
                else:
                    st.session_state.estado_linea = "En producci√≥n"
                    st.session_state.produccion_iniciada = True
            else:
                st.session_state.estado_linea = "Sin registros"
                st.session_state.produccion_iniciada = False
                st.info("‚ÑπÔ∏è Se ha eliminado el √∫ltimo registro. No quedan registros en el sistema.")
        # Si no es de estado, no se modifica el estado de la l√≠nea
    else:
        # No era el √∫ltimo registro: solo eliminar sin afectar estado
        pass

    st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
    st.success("‚úÖ Registro eliminado correctamente.")
    st.rerun()


# Etapas
if st.session_state.etapa == "CEE":
    cee = st.selectbox("Selecciona el CEE", cees, index=0, key="select_cee")
    clave_input = st.text_input("üîê Introduce la clave de acceso", type="password")

    if st.button("Continuar", key="btn_cee"):
        clave_correcta = claves_acceso.get(cee)

        if clave_input == clave_correcta:

            st.session_state.cee = cee
            st.session_state.etapa = "linea"
            st.session_state.csv_path = f"registro_produccion_{cee}.csv"

            try:
                df = pd.read_csv(st.session_state.csv_path, sep=';')
            except (FileNotFoundError, pd.errors.EmptyDataError):
                df = pd.DataFrame(columns=["Fecha", "Hora", "CEE", "L√≠nea", "Estaci√≥n", "Estado", "Operario", "Turno", "Producto", "Unidades producidas", "Unidades defectuosas", "Observaciones"])
                df.to_csv(st.session_state.csv_path, index=False, sep=';')
            st.session_state.df = df
            st.rerun()  # <--- A√±adido

        else:
            st.error("‚ùå Clave incorrecta. Int√©ntalo de nuevo.")


elif st.session_state.etapa == "linea":
    lineas = lineas_por_cee.get(st.session_state.cee, [])
    linea = st.selectbox(f"Selecciona la l√≠nea de {st.session_state.cee}", lineas, index=0, key="select_linea")
    if st.button("Continuar", key="btn_linea"):
        st.session_state.linea = linea
        st.session_state.etapa = "estacion"
        st.rerun()  # <--- A√±adido

elif st.session_state.etapa == "estacion":
    key_estacion = f"{st.session_state.cee}-{st.session_state.linea}"
    n_estaciones = estaciones_por_linea.get(key_estacion, 0)
    estaciones = [f"Estaci√≥n {i+1}" for i in range(n_estaciones)]
    estacion = st.selectbox("Selecciona la estaci√≥n", estaciones, index=0, key="select_estacion")
    if st.button("Continuar", key="btn_estacion"):
        st.session_state.estacion = estacion
        st.session_state.etapa = "registro"
        st.rerun()  # <--- A√±adido


elif st.session_state.etapa == "registro":
    st.subheader(f"Registro en {st.session_state.cee} / {st.session_state.linea} / {st.session_state.estacion}")

    if "estado_linea" not in st.session_state:
        st.session_state.estado_linea = "No iniciada"
    if "produccion_iniciada" not in st.session_state:
        st.session_state.produccion_iniciada = False
    if "mostrar_motivo_reanudacion" not in st.session_state:
        st.session_state.mostrar_motivo_reanudacion = False

    # Mostrar estado actual
    #st.markdown(f"**üõ†Ô∏è Estado actual:** `{st.session_state.estado_linea}`")
    estado = st.session_state.estado_linea

    color = "green"  # Color por defecto
    if estado == "Parada por incidencia":
        color = "red"
    elif estado == "No iniciada":
        color = "gray"
    elif estado == "En producci√≥n":
        color = "green"

    st.markdown(
        f"""
        <div style='font-weight:bold;'>üõ†Ô∏è Estado actual:
            <span style='background-color:#f0f0f0; color:{color}; padding:4px 8px; border-radius:4px; font-family:monospace;'>
                {estado}
            </span>
        </div>
        """,
        unsafe_allow_html=True
    )

    iniciar_disabled = st.session_state.estado_linea == "En producci√≥n"
    if st.button("üü¢ Iniciar Producci√≥n", disabled=iniciar_disabled):
        if st.session_state.estado_linea == "Parada por incidencia":
            st.session_state.mostrar_motivo_reanudacion = True
        else:
            zona = ZoneInfo("Europe/Madrid")
            fila_inicio = {
                "Fecha": datetime.now(zona).strftime("%Y-%m-%d"),
                "Hora": datetime.now(zona).strftime("%H:%M:%S"),
                "CEE": st.session_state.cee,
                "L√≠nea": st.session_state.linea,
                "Estaci√≥n": st.session_state.estacion,
                "Estado": "Inicio producci√≥n",
                "Operario": "",
                "Turno": "",
                "Producto": "",
                "Unidades producidas": "",
                "Unidades defectuosas": "",
                "Observaciones": "Inicio de la jornada de producci√≥n"
            }
            st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([fila_inicio])], ignore_index=True)
            st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
            st.session_state.estado_linea = "En producci√≥n"
            st.session_state.produccion_iniciada = True
            st.success("üü¢ Producci√≥n iniciada correctamente.")
            st.rerun()

    if st.session_state.mostrar_motivo_reanudacion:
        motivo_reanudacion = st.text_area("üìù Motivo de reanudaci√≥n de producci√≥n")

        if st.button("‚úÖ Registrar reanudaci√≥n"):
            if motivo_reanudacion.strip() == "":
                st.warning("‚ö†Ô∏è Por favor, introduce un motivo antes de registrar la reanudaci√≥n.")
            else:
                zona = ZoneInfo("Europe/Madrid")
                fila_reanudacion = {
                    "Fecha": datetime.now(zona).strftime("%Y-%m-%d"),
                    "Hora": datetime.now(zona).strftime("%H:%M:%S"),
                    "CEE": st.session_state.cee,
                    "L√≠nea": st.session_state.linea,
                    "Estaci√≥n": st.session_state.estacion,
                    "Estado": "Reanudaci√≥n producci√≥n",
                    "Operario": "",
                    "Turno": "",
                    "Producto": "",
                    "Unidades producidas": "",
                    "Unidades defectuosas": "",
                    "Observaciones": motivo_reanudacion
                }
                st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([fila_reanudacion])], ignore_index=True)
                st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
                st.session_state.estado_linea = "En producci√≥n"
                st.session_state.produccion_iniciada = True
                st.session_state.mostrar_motivo_reanudacion = False
                st.success("‚úÖ Producci√≥n reanudada correctamente.")
                st.rerun()



    # Inicializa el estado si no existe a√∫n
    if "mostrar_motivo_parada" not in st.session_state:
        st.session_state.mostrar_motivo_parada = False

    parada_disabled = st.session_state.estado_linea in ["Parada por incidencia", "No iniciada"]
    # Paso 1: Pulsar bot√≥n de parada
    if st.button("‚õî Parada por incidencia", disabled=parada_disabled):
        st.session_state.mostrar_motivo_parada = True

    # Paso 2: Mostrar cuadro de texto solo si se ha pulsado el bot√≥n
    if st.session_state.mostrar_motivo_parada:
        motivo = st.text_area("üìù Introduce el motivo de la parada")

        if st.button("Registrar parada con motivo"):
            if motivo.strip() == "":
                st.warning("‚ö†Ô∏è Por favor, introduce un motivo antes de registrar la parada.")
            else:
                zona = ZoneInfo("Europe/Madrid")
                fila_parada = {
                    "Fecha": datetime.now(zona).strftime("%Y-%m-%d"),
                    "Hora": datetime.now(zona).strftime("%H:%M:%S"),
                    "CEE": st.session_state.cee,
                    "L√≠nea": st.session_state.linea,
                    "Estaci√≥n": st.session_state.estacion,
                    "Estado": "Parada producci√≥n",
                    "Operario": "",
                    "Turno": "",
                    "Producto": "",
                    "Unidades producidas": "",
                    "Unidades defectuosas": "",
                    "Observaciones": motivo
                }
                st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([fila_parada])], ignore_index=True)
                st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
                st.session_state.estado_linea = "Parada por incidencia"
                st.session_state.produccion_iniciada = False
                st.success("‚úÖ Parada registrada correctamente.")
                st.session_state.mostrar_motivo_parada = False  # Ocultar de nuevo el cuadro de texto
                st.rerun()


    finalizar_disabled = st.session_state.estado_linea == "No iniciada"
    if st.button("üèÅ Finalizar jornada", disabled=finalizar_disabled):
        zona = ZoneInfo("Europe/Madrid")
        fila_fin = {
            "Fecha": datetime.now(zona).strftime("%Y-%m-%d"),
            "Hora": datetime.now(zona).strftime("%H:%M:%S"),
            "CEE": st.session_state.cee,
            "L√≠nea": st.session_state.linea,
            "Estaci√≥n": st.session_state.estacion,
            "Estado": "Fin producci√≥n",
            "Operario": "",
            "Turno": "",
            "Producto": "",
            "Unidades producidas": "",
            "Unidades defectuosas": "",
            "Observaciones": "Fin de la jornada de producci√≥n"
        }
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([fila_fin])], ignore_index=True)
        st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
        st.session_state.estado_linea = "No iniciada"
        st.session_state.mostrar_motivo_parada = False  # Asegura que no se muestre texto de parada
        st.success("‚úÖ Jornada finalizada correctamente.")
        st.rerun()

    # Si la producci√≥n est√° iniciada, mostrar formulario
    if st.session_state.produccion_iniciada:
        st.markdown("### üßæ Registrar producci√≥n")
        operario = st.text_input("üë§ Operario")
        turno = st.radio("üïí Turno", ["Ma√±ana", "Tarde", "Noche"])
        producto = st.selectbox("üß± Producto", ["Producto A", "Producto B", "Producto C"])
        unidades_producidas = st.number_input("üî¢ Unidades producidas", min_value=1, step=1)
        unidades_defectuosas = st.number_input("‚ùå Unidades defectuosas", min_value=0, step=1)
        observaciones = st.text_area("üìù Observaciones")

        if st.button("‚úÖ Registrar producci√≥n"):
            zona = ZoneInfo("Europe/Madrid")
            nueva_fila = {
                "Fecha": datetime.now(zona).strftime("%Y-%m-%d"),
                "Hora": datetime.now(zona).strftime("%H:%M:%S"),
                "CEE": st.session_state.cee,
                "L√≠nea": st.session_state.linea,
                "Estaci√≥n": st.session_state.estacion,
                "Estado": st.session_state.estado_linea,
                "Operario": operario,
                "Turno": turno,
                "Producto": producto,
                "Unidades producidas": unidades_producidas,
                "Unidades defectuosas": unidades_defectuosas,
                "Observaciones": observaciones
            }
            st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([nueva_fila])], ignore_index=True)
            st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
            st.success("‚úÖ Registro guardado correctamente.")
    else:
        st.warning("‚ö†Ô∏è Debes iniciar la producci√≥n antes de poder registrar unidades.")

    # Mostrar √∫ltimos registros
    st.markdown("---")
    st.markdown("### üìã √öltimos registros")
    st.dataframe(st.session_state.df.tail(5), use_container_width=True)



# --- BOTONES DE NAVEGACI√ìN Y EDICI√ìN SEG√öN LA ETAPA ---

if st.session_state.etapa == "linea":
    st.markdown("---")
    if st.button("üîô Volver al inicio"):
        st.session_state.etapa = "CEE"
        # Limpia variables que dependen de la selecci√≥n previa
        st.session_state.pop("csv_path", None)
        st.session_state.pop("cee", None)
        st.session_state.pop("linea", None)
        st.session_state.pop("estacion", None)
        st.session_state.pop("df", None)
        st.session_state.pop("estado_linea", None)
        st.session_state.pop("produccion_iniciada", None)
        st.rerun()  # <--- A√±adido

elif st.session_state.etapa == "estacion":
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÅ Cambiar l√≠nea"):
            st.session_state.etapa = "linea"
            st.rerun()
    with col2:
        if st.button("üîô Volver al inicio"):
            st.session_state.etapa = "CEE"
            # Limpia variables que dependen de la selecci√≥n previa
            st.session_state.pop("csv_path", None)
            st.session_state.pop("cee", None)
            st.session_state.pop("linea", None)
            st.session_state.pop("estacion", None)
            st.session_state.pop("df", None)
            st.session_state.pop("estado_linea", None)
            st.session_state.pop("produccion_iniciada", None)
            st.rerun()  # <--- A√±adido

elif st.session_state.etapa == "registro":
    # Descargar CSV
    if "csv_path" in st.session_state and os.path.exists(st.session_state.csv_path):
        with open(st.session_state.csv_path, "rb") as f:
            st.download_button(
                "‚¨áÔ∏è Descargar CSV",
                f,
                file_name=f"registro_produccion_{st.session_state.cee}.csv",
                mime="text/csv"
            )


        # --- Bot√≥n para mostrar/ocultar edici√≥n de registros ---
    if "mostrar_edicion" not in st.session_state:
        st.session_state.mostrar_edicion = False

    if st.button("‚úèÔ∏è Modificar o eliminar un registro"):
        # Verifica si hay registros
        if st.session_state.df.empty:
            st.warning("‚ö†Ô∏è A√∫n no hay registros disponibles para modificar o eliminar.")
            st.session_state.mostrar_edicion = False

        else:
            st.session_state.mostrar_edicion = not st.session_state.mostrar_edicion

    if st.session_state.mostrar_edicion:
        st.markdown("### ‚úèÔ∏è Selecciona un registro reciente")

        ultimos_registros = st.session_state.df.tail(5).reset_index(drop=True)

        def formatear_registro(row):
            return f"{row['Fecha']} - {row['Hora']} - {row['CEE']} - {row['L√≠nea']} - {row['Estaci√≥n']} - {row['Estado']} - {row['Operario']} - {row['Turno']} - {row['Producto']} - {row['Unidades producidas']} - {row['Unidades defectuosas']} - {row['Observaciones']}"

        opciones = [(i, formatear_registro(row)) for i, row in ultimos_registros.iterrows()]
        opciones_dict = {desc: idx for idx, desc in opciones}

        registro_str = st.selectbox("Selecciona un registro", list(opciones_dict.keys()), key="registro_selectbox")
        registro_seleccionado = opciones_dict[registro_str]
        registro = ultimos_registros.loc[registro_seleccionado]

        # Clave base √∫nica para este registro
        clave_registro = f"registro_{registro_seleccionado}"

        if registro["Estado"] not in ["Reanudaci√≥n producci√≥n", "Parada producci√≥n"]:
            nuevo_operario = st.text_input("üë§ Operario", value=registro["Operario"], key=f"operario_{clave_registro}")
            turnos_validos = ["Ma√±ana", "Tarde", "Noche"]
            turno_actual = registro.get("Turno", "")
            if turno_actual in turnos_validos:
                nuevo_turno = st.radio("üïí Turno", turnos_validos, index=turnos_validos.index(turno_actual), key=f"turno_{clave_registro}")
            else:
                nuevo_turno = st.radio("üïí Turno", turnos_validos, key=f"turno_{clave_registro}")

            productos_disponibles = ["Producto A", "Producto B", "Producto C"]
            producto_actual = registro.get("Producto", "")

            if producto_actual in productos_disponibles:
                index_producto = productos_disponibles.index(producto_actual)
            else:
                index_producto = 0  # o lo que quieras como valor por defecto

            nuevo_producto = st.selectbox("üß± Producto", productos_disponibles, index=index_producto, key=f"producto_{clave_registro}")
            valor_producidas = registro.get("Unidades producidas", "")
            try:
                valor_producidas = int(valor_producidas)
            except (ValueError, TypeError):
                valor_producidas = 0  # valor por defecto si est√° vac√≠o o mal

            nuevas_producidas = st.number_input("üî¢ Unidades producidas", min_value=0, value=valor_producidas, step=1)

            valor_defectuosas = registro.get("Unidades defectuosas", "")
            try:
                valor_defectuosas = int(valor_defectuosas)
            except (ValueError, TypeError):
                valor_defectuosas = 0

            nuevas_defectuosas = st.number_input("‚ùå Unidades defectuosas", min_value=0, value=valor_defectuosas, step=1, key=f"defectuosas_{clave_registro}")
            nuevas_observaciones = st.text_area("üìù Observaciones", value=registro["Observaciones"], key=f"observaciones_{clave_registro}")

            if st.button("üíæ Guardar cambios en el registro seleccionado", key=f"guardar_{clave_registro}"):
                index_original = st.session_state.df.tail(5).index[registro_seleccionado]
                st.session_state.df.at[index_original, "Operario"] = nuevo_operario
                st.session_state.df.at[index_original, "Turno"] = nuevo_turno
                st.session_state.df.at[index_original, "Producto"] = nuevo_producto
                st.session_state.df.at[index_original, "Unidades producidas"] = nuevas_producidas
                st.session_state.df.at[index_original, "Unidades defectuosas"] = nuevas_defectuosas
                st.session_state.df.at[index_original, "Observaciones"] = nuevas_observaciones
                st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
                st.success("‚úÖ Registro modificado correctamente.")
                st.rerun()
        else:
            st.info("üõ† Este registro es de inicio o parada de producci√≥n, solo puede eliminarse.")

        if st.button("üóëÔ∏è Eliminar registro seleccionado", key=f"eliminar_{clave_registro}"):
            # Obtener el √≠ndice real en el DataFrame original
            index_original = st.session_state.df.tail(5).index[registro_seleccionado]
            eliminar_registro_por_indice(index_original)


        # Eliminar archivo
    if st.button("üóëÔ∏è Eliminar archivo de producci√≥n"):
        os.remove(st.session_state.csv_path)
        st.warning(f"Archivo `{st.session_state.csv_path}` eliminado. Recarga la app para reiniciar.")

    # --- Botones de navegaci√≥n al final ---
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üîÅ Cambiar estaci√≥n"):
            st.session_state.etapa = "estacion"
            st.rerun()
    with col2:
        if st.button("üîÅ Cambiar l√≠nea"):
            st.session_state.etapa = "linea"
            st.rerun()
    with col3:
        if st.button("üîô Volver al inicio"):
            st.session_state.etapa = "CEE"
            # Limpia variables que dependen de la selecci√≥n previa
            st.session_state.pop("csv_path", None)
            st.session_state.pop("cee", None)
            st.session_state.pop("linea", None)
            st.session_state.pop("estacion", None)
            st.session_state.pop("df", None)
            st.session_state.pop("estado_linea", None)
            st.session_state.pop("produccion_iniciada", None)
            st.rerun()  # <--- A√±adido