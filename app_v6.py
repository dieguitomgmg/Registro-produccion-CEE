# -*- coding: utf-8 -*-
"""FAR Panel registro datos_session_state

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z2jP-a6DrF4Q01XTkq2-7HQxUbQIkTHY
"""

# 1. Importar librer√≠as necesarias
import streamlit as st
import pandas as pd
from datetime import datetime
import os
from zoneinfo import ZoneInfo

# Inicializar session state
if "etapa" not in st.session_state:
    st.session_state.etapa = "CEE"

# Datos del proyecto
cees = ["Afan√≠as", "Aprocor", "Artesa", "Envera", "Funcarma", "Juan XXIII", "Prodis", "Trefemo"]
lineas_por_cee = {
    "Afan√≠as": ["L√≠nea 1", "L√≠nea 2"],
    "Aprocor": ["L√≠nea 1", "L√≠nea 2"],
    "Artesa": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Envera": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3", "L√≠nea 4"],
    "Funcarma": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Juan XXIII": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Prodis": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Trefemo": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3", "L√≠nea 4"]
}
estaciones_por_linea = {
    "Afan√≠as-L√≠nea 1": 2, "Afan√≠as-L√≠nea 2": 2,
    "Aprocor-L√≠nea 1": 2, "Aprocor-L√≠nea 2": 6,
    "Artesa-L√≠nea 1": 3, "Artesa-L√≠nea 2": 2, "Artesa-L√≠nea 3": 2,
    "Envera-L√≠nea 1": 3, "Envera-L√≠nea 2": 3, "Envera-L√≠nea 3": 2, "Envera-L√≠nea 4": 3,
    "Funcarma-L√≠nea 1": 4, "Funcarma-L√≠nea 2": 3, "Funcarma-L√≠nea 3": 3,
    "Juan XXIII-L√≠nea 1": 3, "Juan XXIII-L√≠nea 2": 3, "Juan XXIII-L√≠nea 3": 3,
    "Prodis-L√≠nea 1": 2, "Prodis-L√≠nea 2": 2, "Prodis-L√≠nea 3": 3,
    "Trefemo-L√≠nea 1": 4, "Trefemo-L√≠nea 2": 3, "Trefemo-L√≠nea 3": 3, "Trefemo-L√≠nea 4": 4
}



st.set_page_config(page_title="Registro Producci√≥n CEE", layout="centered")
st.title("üì¶ Registro de Producci√≥n - Centro Especial de Empleo")

# Etapas
if st.session_state.etapa == "CEE":
    cee = st.selectbox("Selecciona el CEE", cees)
    if st.button("Continuar"):
        st.session_state.cee = cee
        st.session_state.etapa = "linea"

        # Mover esto dentro del bot√≥n:
        st.session_state.csv_path = f"registro_produccion_{cee}.csv"
        try:
            df = pd.read_csv(st.session_state.csv_path, sep=';')
        except (FileNotFoundError, pd.errors.EmptyDataError):
            df = pd.DataFrame(columns=["FechaHora", "CEE", "L√≠nea", "Estaci√≥n", "Operario", "Turno", "Producto", "Unidades", "Observaciones"])
            df.to_csv(st.session_state.csv_path, index=False, sep=';')
        st.session_state.df = df


elif st.session_state.etapa == "linea":
    lineas = lineas_por_cee[st.session_state.cee]
    linea = st.selectbox(f"Selecciona la l√≠nea de {st.session_state.cee}", lineas)
    if st.button("Continuar"):
        st.session_state.linea = linea
        st.session_state.etapa = "estacion"

elif st.session_state.etapa == "estacion":
    key = f"{st.session_state.cee}-{st.session_state.linea}"
    n_estaciones = estaciones_por_linea.get(key, 0)
    estaciones = [f"Estaci√≥n {i+1}" for i in range(n_estaciones)]
    estacion = st.selectbox("Selecciona la estaci√≥n", estaciones)
    if st.button("Continuar"):
        st.session_state.estacion = estacion
        st.session_state.etapa = "registro"

elif st.session_state.etapa == "registro":
    st.subheader(f"Registro en {st.session_state.cee} / {st.session_state.linea} / {st.session_state.estacion}")

    # Bot√≥n para iniciar la producci√≥n
    if st.button("üü¢ Iniciar Producci√≥n"):
        zona = ZoneInfo("Europe/Madrid")
        fila_inicio = {
            "FechaHora": datetime.now(zona).strftime("%Y-%m-%d %H:%M:%S"),
            "CEE": st.session_state.cee,
            "L√≠nea": st.session_state.linea,
            "Estaci√≥n": st.session_state.estacion,
            "Operario": "Inicio producci√≥n",
            "Turno": "",
            "Producto": "",
            "Unidades": 0,
            "Observaciones": "Inicio de la jornada de producci√≥n"
        }
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([fila_inicio])], ignore_index=True)
        st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';')
        st.success("üü¢ Producci√≥n iniciada correctamente.")

    # Bot√≥n para registrar parada por incidencia
    if st.button("‚õî Parada por incidencia"):
        zona = ZoneInfo("Europe/Madrid")
        fila_parada = {
            "FechaHora": datetime.now(zona).strftime("%Y-%m-%d %H:%M:%S"),
            "CEE": st.session_state.cee,
            "L√≠nea": st.session_state.linea,
            "Estaci√≥n": st.session_state.estacion,
            "Operario": "Parada producci√≥n",
            "Turno": "",
            "Producto": "",
            "Unidades": 0,
            "Observaciones": "Parada de la producci√≥n por incidencia"
        }
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([fila_parada])], ignore_index=True)
        st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';')
        st.error("‚õî Parada registrada.")

    # Entradas para el registro de producci√≥n
    operario = st.text_input("üë§ Operario")
    turno = st.radio("üïí Turno", ["Ma√±ana", "Tarde", "Noche"])
    producto = st.selectbox("üß± Producto", ["Producto A", "Producto B", "Producto C"])
    unidades = st.number_input("üî¢ Unidades producidas", min_value=1, step=1)
    observaciones = st.text_area("üìù Observaciones")

    if st.button("‚úÖ Registrar producci√≥n"):
        zona = ZoneInfo("Europe/Madrid")
        nueva_fila = {
            "FechaHora": datetime.now(zona).strftime("%Y-%m-%d %H:%M:%S"),
            "CEE": st.session_state.cee,
            "L√≠nea": st.session_state.linea,
            "Estaci√≥n": st.session_state.estacion,
            "Operario": operario,
            "Turno": turno,
            "Producto": producto,
            "Unidades": unidades,
            "Observaciones": observaciones
        }
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([nueva_fila])], ignore_index=True)
        st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
        st.success("‚úÖ Registro guardado correctamente.")

    st.markdown("---")
    st.markdown("### √öltimos registros")
    st.dataframe(st.session_state.df.tail(5), use_container_width=True)

    # Descargar CSV
    with open(st.session_state.csv_path, "rb") as f:
        st.download_button("‚¨áÔ∏è Descargar CSV", f, file_name=f"registro_produccion_{st.session_state.cee}.csv", mime="text/csv")

        # Eliminar archivo
    if st.button("üóëÔ∏è Eliminar archivo de producci√≥n"):
        os.remove(st.session_state.csv_path)
        st.warning(f"Archivo `{st.session_state.csv_path}` eliminado. Recarga la app para reiniciar.")

    if st.button("üîÅ Volver al inicio"):
        st.session_state.etapa = "CEE"