# -*- coding: utf-8 -*-
"""FAR panel registro datos_v8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nT3kQGJwML_aj2jZkxO87_evMC_vG_1B
"""

#!pip install streamlit pandas pytz
# 1. Importar librer√≠as necesarias
import streamlit as st
import pandas as pd
from datetime import datetime
import os
from zoneinfo import ZoneInfo

# Inicializar session state
if "etapa" not in st.session_state:
    st.session_state.etapa = "CEE"

# Datos del proyecto
cees = ["Afan√≠as", "Aprocor", "Artesa", "Envera", "Funcarma", "Juan XXIII", "Prodis", "Trefemo"]
lineas_por_cee = {
    "Afan√≠as": ["L√≠nea 1", "L√≠nea 2"],
    "Aprocor": ["L√≠nea 1", "L√≠nea 2"],
    "Artesa": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Envera": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3", "L√≠nea 4"],
    "Funcarma": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Juan XXIII": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Prodis": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3"],
    "Trefemo": ["L√≠nea 1", "L√≠nea 2", "L√≠nea 3", "L√≠nea 4"]
}
estaciones_por_linea = {
    "Afan√≠as-L√≠nea 1": 2, "Afan√≠as-L√≠nea 2": 2,
    "Aprocor-L√≠nea 1": 2, "Aprocor-L√≠nea 2": 6,
    "Artesa-L√≠nea 1": 3, "Artesa-L√≠nea 2": 2, "Artesa-L√≠nea 3": 2,
    "Envera-L√≠nea 1": 3, "Envera-L√≠nea 2": 3, "Envera-L√≠nea 3": 2, "Envera-L√≠nea 4": 3,
    "Funcarma-L√≠nea 1": 4, "Funcarma-L√≠nea 2": 3, "Funcarma-L√≠nea 3": 3,
    "Juan XXIII-L√≠nea 1": 3, "Juan XXIII-L√≠nea 2": 3, "Juan XXIII-L√≠nea 3": 3,
    "Prodis-L√≠nea 1": 2, "Prodis-L√≠nea 2": 2, "Prodis-L√≠nea 3": 3,
    "Trefemo-L√≠nea 1": 4, "Trefemo-L√≠nea 2": 3, "Trefemo-L√≠nea 3": 3, "Trefemo-L√≠nea 4": 4
}



st.set_page_config(page_title="Registro Producci√≥n CEE", layout="centered")
st.title("üì¶ Registro de Producci√≥n - Centro Especial de Empleo")


# Inicializar variables en session_state si no existen
if "etapa" not in st.session_state:
    st.session_state.etapa = "CEE"
if "cee" not in st.session_state:
    st.session_state.cee = None
if "linea" not in st.session_state:
    st.session_state.linea = None
if "estacion" not in st.session_state:
    st.session_state.estacion = None

claves_acceso = {
    "Afan√≠as": "clave1",
    "Aprocor": "clave2",
    "Artesa": "clave3",
    "Envera": "clave4",
    "Funcarma": "clave5",
    "Juan XXIII": "clave6",
    "Prodis": "clave7",
    "Trefemo": "clave8"
}

# Etapas
if st.session_state.etapa == "CEE":
    cee = st.selectbox("Selecciona el CEE", cees, index=0, key="select_cee")
    clave_input = st.text_input("üîê Introduce la clave de acceso", type="password")

    if st.button("Continuar", key="btn_cee"):
        clave_correcta = claves_acceso.get(cee)

        if clave_input == clave_correcta:

            st.session_state.cee = cee
            st.session_state.etapa = "linea"
            st.session_state.csv_path = f"registro_produccion_{cee}.csv"

            try:
                df = pd.read_csv(st.session_state.csv_path, sep=';')
            except (FileNotFoundError, pd.errors.EmptyDataError):
                df = pd.DataFrame(columns=["Fecha", "Hora", "CEE", "L√≠nea", "Estaci√≥n", "Operario", "Turno", "Producto", "Unidades producidas", "Unidades defectuosas", "Observaciones"])
                df.to_csv(st.session_state.csv_path, index=False, sep=';')
            st.session_state.df = df
            st.rerun()  # <--- A√±adido

        else:
            st.error("‚ùå Clave incorrecta. Int√©ntalo de nuevo.")


elif st.session_state.etapa == "linea":
    lineas = lineas_por_cee.get(st.session_state.cee, [])
    linea = st.selectbox(f"Selecciona la l√≠nea de {st.session_state.cee}", lineas, index=0, key="select_linea")
    if st.button("Continuar", key="btn_linea"):
        st.session_state.linea = linea
        st.session_state.etapa = "estacion"
        st.rerun()  # <--- A√±adido

elif st.session_state.etapa == "estacion":
    key_estacion = f"{st.session_state.cee}-{st.session_state.linea}"
    n_estaciones = estaciones_por_linea.get(key_estacion, 0)
    estaciones = [f"Estaci√≥n {i+1}" for i in range(n_estaciones)]
    estacion = st.selectbox("Selecciona la estaci√≥n", estaciones, index=0, key="select_estacion")
    if st.button("Continuar", key="btn_estacion"):
        st.session_state.estacion = estacion
        st.session_state.etapa = "registro"
        st.rerun()  # <--- A√±adido


elif st.session_state.etapa == "registro":
    st.subheader(f"Registro en {st.session_state.cee} / {st.session_state.linea} / {st.session_state.estacion}")

    if "estado_linea" not in st.session_state:
        st.session_state.estado_linea = "No iniciada"
    if "produccion_iniciada" not in st.session_state:
        st.session_state.produccion_iniciada = False

    # Mostrar estado actual
    st.markdown(f"**üõ†Ô∏è Estado actual:** `{st.session_state.estado_linea}`")

    # Bot√≥n para iniciar la producci√≥n
    if st.button("üü¢ Iniciar Producci√≥n"):
        zona = ZoneInfo("Europe/Madrid")
        fila_inicio = {
            "Fecha": datetime.now(zona).strftime("%Y-%m-%d"),
            "Hora": datetime.now(zona).strftime("%H:%M:%S"),
            "CEE": st.session_state.cee,
            "L√≠nea": st.session_state.linea,
            "Estaci√≥n": st.session_state.estacion,
            "Operario": "Inicio producci√≥n",
            "Turno": "",
            "Producto": "",
            "Unidades producidas": "",
            "Unidades defectuosas": "",
            "Observaciones": "Inicio de la jornada de producci√≥n"
        }
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([fila_inicio])], ignore_index=True)
        st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';')
        st.session_state.estado_linea = "En producci√≥n"
        st.session_state.produccion_iniciada = True
        st.success("üü¢ Producci√≥n iniciada correctamente.")
        st.rerun()  # <--- A√±adido

    # Bot√≥n para registrar parada por incidencia
    if st.button("‚õî Parada por incidencia"):
        zona = ZoneInfo("Europe/Madrid")
        fila_parada = {
            "Fecha": datetime.now(zona).strftime("%Y-%m-%d"),
            "Hora": datetime.now(zona).strftime("%H:%M:%S"),
            "CEE": st.session_state.cee,
            "L√≠nea": st.session_state.linea,
            "Estaci√≥n": st.session_state.estacion,
            "Operario": "Parada producci√≥n",
            "Turno": "",
            "Producto": "",
            "Unidades producidas": "",
            "Unidades defectuosas": "",
            "Observaciones": "Parada de la producci√≥n por incidencia"
        }
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([fila_parada])], ignore_index=True)
        st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';')
        st.session_state.estado_linea = "Parada por incidencia"
        st.session_state.produccion_iniciada = False
        st.error("‚õî Parada registrada.")
        st.rerun()  # <--- A√±adido

    # Si la producci√≥n est√° iniciada, mostrar formulario
    if st.session_state.produccion_iniciada:
        st.markdown("### üßæ Registrar producci√≥n")
        operario = st.text_input("üë§ Operario")
        turno = st.radio("üïí Turno", ["Ma√±ana", "Tarde", "Noche"])
        producto = st.selectbox("üß± Producto", ["Producto A", "Producto B", "Producto C"])
        unidades_producidas = st.number_input("üî¢ Unidades producidas", min_value=1, step=1)
        unidades_defectuosas = st.number_input("‚ùå Unidades defectuosas", min_value=0, step=1)
        observaciones = st.text_area("üìù Observaciones")

        if st.button("‚úÖ Registrar producci√≥n"):
            zona = ZoneInfo("Europe/Madrid")
            nueva_fila = {
                "Fecha": datetime.now(zona).strftime("%Y-%m-%d"),
                "Hora": datetime.now(zona).strftime("%H:%M:%S"),
                "CEE": st.session_state.cee,
                "L√≠nea": st.session_state.linea,
                "Estaci√≥n": st.session_state.estacion,
                "Operario": operario,
                "Turno": turno,
                "Producto": producto,
                "Unidades producidas": unidades_producidas,
                "Unidades defectuosas": unidades_defectuosas,
                "Observaciones": observaciones
            }
            st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([nueva_fila])], ignore_index=True)
            st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
            st.success("‚úÖ Registro guardado correctamente.")
    else:
        st.warning("‚ö†Ô∏è Debes iniciar la producci√≥n antes de poder registrar unidades.")

    # Mostrar √∫ltimos registros
    st.markdown("---")
    st.markdown("### üìã √öltimos registros")
    st.dataframe(st.session_state.df.tail(5), use_container_width=True)


    # Descargar CSV (solo si el archivo existe)
    if "csv_path" in st.session_state and os.path.exists(st.session_state.csv_path):
        with open(st.session_state.csv_path, "rb") as f:
            st.download_button(
                "‚¨áÔ∏è Descargar CSV",
                f,
                file_name=f"registro_produccion_{st.session_state.cee}.csv",
                mime="text/csv"
                key="download_csv_button"  # ‚Üê aqu√≠ est√° la soluci√≥n
            )


# --- BOTONES DE NAVEGACI√ìN Y EDICI√ìN SEG√öN LA ETAPA ---

if st.session_state.etapa == "linea":
    st.markdown("---")
    if st.button("üîô Volver al inicio"):
        st.session_state.etapa = "inicio"
        st.rerun()

elif st.session_state.etapa == "estacion":
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÅ Cambiar l√≠nea"):
            st.session_state.etapa = "linea"
            st.rerun()
    with col2:
        if st.button("üîô Volver al inicio"):
            st.session_state.etapa = "inicio"
            st.rerun()

elif st.session_state.etapa == "registro":
    # Descargar CSV (ya lo tienes previamente)
    if "csv_path" in st.session_state and os.path.exists(st.session_state.csv_path):
        with open(st.session_state.csv_path, "rb") as f:
            st.download_button(
                "‚¨áÔ∏è Descargar CSV",
                f,
                file_name=f"registro_produccion_{st.session_state.cee}.csv",
                mime="text/csv"
            )

    # --- Bot√≥n para mostrar editor ---
    if "mostrar_editor" not in st.session_state:
        st.session_state.mostrar_editor = False

    if st.button("üìù Modificar o eliminar un registro reciente"):
        st.session_state.mostrar_editor = not st.session_state.mostrar_editor

    # --- Editor de registros (si est√° activado) ---
    if st.session_state.mostrar_editor:
        st.markdown("### ‚úèÔ∏è Modificar o eliminar un registro reciente")

        ultimos_registros = st.session_state.df.tail(5).reset_index(drop=True)
        registro_seleccionado = st.selectbox(
            "Selecciona un registro",
            ultimos_registros.index,
            format_func=lambda i: f"{ultimos_registros.loc[i, 'Fecha']} - {ultimos_registros.loc[i, 'Operario']}"
        )
        registro = ultimos_registros.loc[registro_seleccionado]

        nuevo_operario = st.text_input("üë§ Operario", value=registro["Operario"], key="editar_operario")
        nuevo_turno = st.radio("üïí Turno", ["Ma√±ana", "Tarde", "Noche"],
                               index=["Ma√±ana", "Tarde", "Noche"].index(registro["Turno"]), key="editar_turno")
        nuevo_producto = st.selectbox("üß± Producto", ["Producto A", "Producto B", "Producto C"],
                                      index=["Producto A", "Producto B", "Producto C"].index(registro["Producto"]), key="editar_producto")
        nuevas_producidas = st.number_input("üî¢ Unidades producidas", min_value=0,
                                            value=int(registro["Unidades producidas"]), step=1, key="editar_producidas")
        nuevas_defectuosas = st.number_input("‚ùå Unidades defectuosas", min_value=0,
                                             value=int(registro["Unidades defectuosas"]), step=1, key="editar_defectuosas")
        nuevas_observaciones = st.text_area("üìù Observaciones", value=registro["Observaciones"], key="editar_observaciones")

        if st.button("üíæ Guardar cambios en el registro seleccionado"):
            index_original = st.session_state.df.tail(5).index[registro_seleccionado]
            st.session_state.df.at[index_original, "Operario"] = nuevo_operario
            st.session_state.df.at[index_original, "Turno"] = nuevo_turno
            st.session_state.df.at[index_original, "Producto"] = nuevo_producto
            st.session_state.df.at[index_original, "Unidades producidas"] = nuevas_producidas
            st.session_state.df.at[index_original, "Unidades defectuosas"] = nuevas_defectuosas
            st.session_state.df.at[index_original, "Observaciones"] = nuevas_observaciones
            st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
            st.success("‚úÖ Registro modificado correctamente.")
            st.rerun()

        if st.button("üóëÔ∏è Eliminar registro seleccionado"):
            index_original = st.session_state.df.tail(5).index[registro_seleccionado]
            st.session_state.df = st.session_state.df.drop(index_original).reset_index(drop=True)
            st.session_state.df.to_csv(st.session_state.csv_path, index=False, sep=';', encoding='utf-8-sig')
            st.warning("üóëÔ∏è Registro eliminado.")
            st.rerun()

    # --- Botones de navegaci√≥n al final ---
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üîÅ Cambiar estaci√≥n"):
            st.session_state.etapa = "estacion"
            st.rerun()
    with col2:
        if st.button("üîÅ Cambiar l√≠nea"):
            st.session_state.etapa = "linea"
            st.rerun()
    with col3:
        if st.button("üîô Volver al inicio"):
            st.session_state.etapa = "inicio"
            st.rerun()